---
import type { OGData } from '@/type';
import { extractOGTags, sanitizeAndDecodeHtml } from '@/utils/htmlUtils';
import { parse } from 'node-html-parser';

import iconv from 'iconv-lite';
import jschardet from 'jschardet';

interface Props {
    url: string;
}

const { url } = Astro.props;

async function fetchOGTags(url: string): Promise<OGData> {
    try {
        const response = await fetch(url);

        const buffer = await response.arrayBuffer();
        const bufferData = Buffer.from(buffer);

        // デフォルトのエンコーディングを設定
        let charset = 'utf-8';

        // 1. HTTPヘッダーからcharsetを取得
        const contentType = response.headers.get('content-type');
        if (contentType) {
            const matches = contentType.match(/charset=([^;]+)/i);
            if (matches !== null) {
                if (matches[1]) {
                    charset = matches[1]?.trim().toLowerCase();
                }
            }
        }

        // 2. charsetがヘッダーに存在しない場合、HTMLの<meta>タグから取得
        if (!contentType?.toLowerCase().includes('charset=')) {
            // 一旦UTF-8としてデコードして<meta>タグを解析
            const utf8Html = iconv.decode(bufferData, 'utf-8');
            const rootForCharset = parse(utf8Html);

            const metaCharset = rootForCharset.querySelector('meta[charset]');
            if (metaCharset) {
                if (typeof metaCharset.getAttribute('charset') !== 'undefined') {
                    charset = metaCharset.getAttribute('charset')?.toLowerCase() as string;
                }
            } else {
                const metaContentType = rootForCharset.querySelector(
                    'meta[http-equiv="Content-Type"]',
                );
                if (metaContentType) {
                    const content = metaContentType.getAttribute('content') || '';
                    const matchesMeta = content.match(/charset=([^;]+)/i);
                    if (matchesMeta) {
                        if (matchesMeta[1]) {
                            charset = matchesMeta[1].trim().toLowerCase();
                        }
                    }
                }
            }
        }

        // 3. charsetがまだ不明な場合、jschardetで自動検出
        if (!iconv.encodingExists(charset)) {
            const detected = jschardet.detect(bufferData);

            if (detected) {
                charset = detected.encoding.toLowerCase();
            } else {
                charset = 'utf-8'; // フォールバック
            }
        }

        // 4. バッファを適切なエンコーディングでデコードし、OGタグを抽出
        const ogData = extractOGTags(bufferData, charset);

        // '/' パス対策
        if (ogData.image?.startsWith('/')) {
            const domain = new URL(url).origin;
            ogData.image = domain + ogData.image;
        }

        return ogData;
    } catch (error) {
        console.error('OGタグの取得に失敗しました:', error);
        return {};
    }
}

const ogData = await fetchOGTags(url);
---

<style>

</style>

{ogData.title ? (
    <a
        href={url}
        target="_blank"
        rel="noopener noreferrer"
        class="rounded-lg flex my-4 no-underline hover:bg-neutral-950/60"
    >
        <div class="
            flex
            w-full
            astro-ggf2imng
            shadow-mbump
            hover:shadow-mbump-active
            rounded-lg
            border
            border-white/10
            hover:border-white/80
            max-h-28
            ">
            <div class="flex-1 p-3">
                <h5>{ogData.title ? sanitizeAndDecodeHtml(ogData.title) : 'タイトルが取得できませんでした'}</h5>
                {ogData.description && <p>{sanitizeAndDecodeHtml(ogData.description)}</p>}
                <span class="url">{ogData.siteName || new URL(url).hostname}</span>
            </div>
            {ogData.image && (
                <img
                    src={ogData.image}
                    alt="thumbnail"
                    class="w-1/3 rounded-r-lg object-cover"
                    style="margin: 0; color: var(--color-gray-4)"
                />
            )}
        </div>
    </a>
) : (
    <p>プレビューを表示できませんでした。</p>
)}




